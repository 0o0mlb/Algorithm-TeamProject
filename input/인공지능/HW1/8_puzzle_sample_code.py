# -*- coding: utf-8 -*-
"""8-puzzle-sample-code.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LMEzjVc-EPESxXnCMkyPZMTCFB1iCXmb
"""

# 인공지능 HW1

def expand(node):
    nodeList = []
    state = node.state
    blank = state.index(0)   # location of blank
    row = int(blank / SIDE)
    col = blank % SIDE
    
    # up
    if not (row == 0):
        childState = deepcopy(state)
        childState[blank] = childState[blank-SIDE]
        childState[blank-SIDE] = 0
        nodeList.append(Node(childState, node, "U", node.g+1, heuristic(childState)))
    # down
    if not (row == SIDE-1):
        childState = deepcopy(state)
        childState[blank] = childState[blank+SIDE]
        childState[blank+SIDE] = 0
        nodeList.append(Node(childState, node, "D", node.g+1, heuristic(childState)))
    # left
    if not (col == 0):
        childState = deepcopy(state)
        childState[blank] = childState[blank-1]
        childState[blank-1] = 0
        nodeList.append(Node(childState, node, "L", node.g+1, heuristic(childState)))
    # right
    if not (col == SIDE-1):
        childState = deepcopy(state)
        childState[blank] = childState[blank+1]
        childState[blank+1] = 0
        nodeList.append(Node(childState, node, "R", node.g+1, heuristic(childState)))

    return nodeList

# 인공지능 8-puzzle

'''
The start and goal states
'''
startState = [1, 2, 3, 
              8, 0, 4, 
              7, 6, 5]
goalState = [7, 8, 1,
             6, 0, 2,
             5, 4, 3]

print("Start state")
printState(startState)
print("Goal state")
printState(goalState)

'''
Make start node and do A* search
'''
startNode = Node(startState, None, "Start", 0, heuristic(startState))
print("Start A* search")
goalNode = ASTAR(startNode)
print(" Finished")

'''
If succeeded, show the solution path
'''
if (goalNode == None):
    print("A* Failed ")
else:
    print("A* Succeeded ")
    print("solution path: ", goalNode.moves)
    printSolutionPath(goalNode)