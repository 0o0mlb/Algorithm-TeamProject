상태 패턴에서 중요한 점은 상태 객체가 기능을 제공한다는 점입니다. State 인터페이스는 동전 증가 처리와 제품 선택 처리를 할 수 있는 두 개의 메서드를 정의하고 있습니다. 이 두 메서드는 모든 상태에서 동일하게 적용되는 기능입니다.

콘텍스트 필드는 상태 객체를 갖고 있습니다. 콘텍스트는 클라이언트로부터 기능 실행 요청을 받으면, 상태 객체에 처리를 위임하는 방식으로 구현합니다. 예를 들어, 자판기 기능을 제공하는 VendingMachine 클래스의 insertCoin() 메서드와 select() 메서드는 아래 코드와 같이 State 객체에 처리를 위임하는 방식으로 동작합니다.

// 상태 패턴을 적용한 VendingMachine 구현
public class VendingMachine {

    private State state;

    public VendingMachine() {
        this.state = new NoCoinState();
    }

    public void insertCoin(int coin) {
        state.increaseCoin(coin, this); // 상태 객체에 위임
    }

    public void select(int productId) {
        state.select(productId, this); // 상태 객체에 위임
    }
과제
    public void changeState(State newState) {
        this.state = newState;
    }

    ...// 기타 다른 기능
}
state 필드를 NoCooinState 객체로 초기화했는데, NoCoinState 클래스는 아래와 같이 구현했습니다.

public class NoCoinState implements State {

    @Override
    public void increaseCoin(int coin, VendingMachine vm) {
        vm.increaseCoin(coin);
        vm.changeState(new SelectableState());
    }

    @Override
    public void select(int productId, VendingMachine vm) {
        SoundUnit.beep();
    }
}
NoCoinState 클래스의 increaseCoin() 메서드는 VendingMachine의 동전 수를 증가시키고, 상태를 SeletableState로 변경합니다. 즉, 동전 없는 상태에서 동전을 넣으면 동전 수를 증가시키고 선택 가능 상태로 변경하는 기능을 제공하는 것입니다. NoCoinState 클래스의 select() 메서드는 에러 음을 발생시킵니다. 이는 동전 없는 상태에서 음료를 선택하면 에러 음을 발생시킨다는 것을 뜻합니다.

객체지향설계와패턴

NoCoinState 클래스와 유사하게 SelectableState 클래스는 음료 선택이 가능한 상태에서 동전을 넣을 때와 음료를 선택할 때의 자판기 동작 방식을 구현합니다.

public class SelectableState implements State {

    @Override
    public void increaseCoin(int coin, VendingMachine vm) {
        vm.increaseCoin(coin);
    }

    @Override
    public void select(int productId, VendingMachine vm) {
        vm.provideProduct(productId);
        vm.decreaseCoin();

        if(vm.hasNoCoin()) 
            vm.changeState(new NoCoinState());
    }
}
NoCoinState 클래스와 SelectableState 클래스를 보면, 상태 패턴을 적용함으로써 VendingMachine 클래스에 구현되어 있는 상태 별 동작 구현 코드가 각 상태의 클래스로 이동함을 알 수 있습니다. 또한, 이 과정에서 VendingMachine 클래스의 코드 구현은 상태 객체에 위임하는 방식으로 단순해집니다.
자료
상태 패턴의 장점은 새로운 상태가 추가되더라도 콘텍스트 코드가 받는 영향은 최소화 된다는 점입니다.

예를 들어, 자판기 예제에서 자판기의 청소 상태 구현을 위해 CleaningState 클래스를 추가하더라도 insertCoin() 메서드와 select() 메서드의 코드는 그대로 유지됩니다.
상태가 많아질수록 조건문을 이용한 방식은 코드가 복잡해져서 유지 보수를 어렵게 만들지만, 상태 패턴의 경우 상태가 많아지더라도 코드의 복잡도는 증가하지 않기 때문에 유지보수에 유리합니다.

상태 패턴의 두 번째 장점은 상태에 따른 동작을 구현한 코드가 각 상태 별로 구분되기 때문에 상태 별 동작을 수정하기가 쉽다는 점입니다. 조건문을 이용한 방식을 사용할 경우 동전 없음 상태의 동작을 수정하려면 각 메서드를 찾아다니면서 수정해줘야 하는 반면에, 상태 패턴을 적용한 경우 동전 없음 상태를 표현하는 NoCoinState 클래스를 수정해 주면 됩니다. 관련된 코드가 한 곳에 모여있기 때문에 안전하고 더 빠르게 구현을 변경할 수 있게 됩니다.