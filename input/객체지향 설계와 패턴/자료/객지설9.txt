상태 변경은 누가?
상태 패턴을 적용할 때 고려할 문제는 콘텍스트의 상태 변경을 누가 하느냐에 대한 것입니다. 상태 변경을 하는 주체는 콘텍스트나 상태 객체 둘 중 하나가 됩니다. 앞서 예제에서는 각 상태객체에서 콘텍스트의 상태를 변경해 주었습니다.
자료
예를 들어, NoCoinState 클래스의 increaseCoin() 메서드는 VendingMachine의 changeState() 메서드를 호출해서 VendingMachine의 상태를 SelectableState로 변경하였습니다.
객체지향 설계와 패턴
public class NoCoinState implements State {

    @Override
    public void increaseCoin(int coin, VendingMachine vm) {
        vm.increaseCoin(coin);
        // 상태 객체에서 콘텍스트의 상태 변경
        vm.changeState(new SelectableState());
    }
상태 객체에서 콘텍스트의 상태를 변경하려면 콘텍스트의 다른 값에 접근해야 할 때도 있습니다.
예를 들어, SelectableState 클래스의 select() 메서드는 VendingMachine의 상태를 NoCoinState로 변경해야 하는지 여부를 확인하기 위해 VendingMachine의 hasNoCoin() 메서드를 사용하고 있습니다. 이는 상태 객체에서 콘텍스트의 상태를 변경할 수 있는 조건을 확인할 수 있도록 콘텍스트 인터페이스에 메서드를 추가해야한 다는 것을 의미합니다.

public class SelectableState implements State {

    @Override
    public void select(int productId, VendingMachine vm) {
        vm.provideProduct(productId);
        vm.decreaseCoin();
        // 상태 변경을 위해, vm 객체가 동전이 없는지 확인
        if(vm.hasNoCoin()) 
            vm.changeState(new NoCoinState());
    }
콘텍스트 상태를 변경할 경우 콘텍스트의 코드가 다소 복잡해질 수 있습니다. 앞서 VendingMachine 클래스 예제에서 콘텍스트가 직접 상태를 변경하도록 VendingMachine 클래스를 수정하면 아래와 같은 코드가 됩니다.

public class VendingMachine {
    private State state;

    public VendingMachine() {
        this.state = new NoCoinState();
    }
과제
      public void insertCoin(int coin) {
        state.increaseCoin(coin, this); 
        if(hasCoin) 
            changeState(new SelectableState()); // 콘텍스트 상태 변경
    }

    public void select(int productId) {
        state.select(productId, this); 
        if(state.isSelectable() && hasNoCoin())
            changeState(new NoCoinState()); // 콘텍스트 상태 변경
    }

    private void changeState(State newState) {
        this.state = newState;
    } 객체설계

    private boolean hasCoin() {
        ...
    }

    private boolean hasNoCoin() {
        ...
    }
    ...// 기타 다른 기능

}
VendingMachine 클래스의 changeState() 메서드, hasNoCoin() 메서드 그리고 hasCoin() 메서드의 접근 범위를 private으로 지정했는데, 그 이유는 상태 객체에서 콘텍스트의 상태를 변경하기 위한 목적으로 이들 메서드에 접근할 필요가 없어졌기 때문입니다. 이제 상태 객체는 자신이 수행해야 하는 작업만 처리하도록 바뀝니다.