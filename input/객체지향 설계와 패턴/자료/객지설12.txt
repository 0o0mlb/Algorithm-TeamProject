ProxyImage 클래스는 draw() 메서드가 호출되기 전까지 RealImage 객체를 생성하지 않습니다. ProxyImage 클래스의 draw() 메서드는 최초로 draw() 메소드를 실행할 때 RealImage 객체를 생성하고, 그 뒤로 생성된 RealImage 객체의 draw() 메서드를 호출합니다.

ListUI 클래스는 Image 타입을 사용하기 때문에 실제 타입이 RealImage PrxoyImage 여부는 모릅니다. 단지, Image 타입의 draw() 메서드를 이용해서 이미지를 그려 달라고 할 뿐입니다. ListUI 클래스가 다음과 같이 Image 타입의 목록을 가지고 있고, 스크롤이 되는 시점에 해당 Image 객체의 draw() 메소드를 호출한다고 합시다.
과제
public class ListUI {
   
    private List<Image> images;
   
    public ListUI(List<Image> images) {
        this.images = images;
    }

객체지향 설계와 패턴
자료
    // 스크롤 시, 화면에 표시되는 이미지를 표시
    public void onScroll(int start, int end) {
        for(int i = start; i <= end; i++) {
            Image image = images.get(i);
            image.draw();
        }
    }
}
ListUI 클래스의 images 필드에 보관된 Image 객체의 실제 타입이 ProxyImage인 경우, 위 코드의 onScroll() 메서드에서 이미지를 그리는 과정은 다음과 같이 동작하게 됩니다.

PrxoyImage 객체는 최초에 draw() 메서드가 실행될 때 RealImage 객체를 생성하기 때문에, ProxyImage 객체의 draw() 메서드가 호출되기 전에는 RealImage 객체를 생성되지 않으므로 메모리에 이미지 데이터를 로딩하지 않습니다. 따라서 화면에 표시되지 않는 이미지를 로딩하기 위해 불필요하게 메모리를 낭비하는 상황을 방지할 수 있게 됩니다.

또한, ListUI 클래스는 이미지가 언제 로딩되는지 알 필요가 없기 때문에, 이미지 로딩 정책을 변경하더라도 ListUI 클래스의 코드는 영향을 받지 않습니다.

예를 들어, 상위 4개는 바로 이미지를 로딩하고 나머지는 화면에 보여지는 순간에 로딩하도록 구현해야 할 경우 다음 코드처럼 RealImage 객체와 PrxoyImage 객체를 섞어서 ListUI에 전달해 주면 됩니다.

List<String> paths = ...
List<Image> images = new ArrayList<Image> (paths.size());
for(int i = 0; i < paths.size(); i++){
    if (i < 4) {
        images.add(new RealImage(paths.get(i)));
    } else {
        images.add(new ProxyImage(paths.get(i)));
    }
}
// 이미지 로딩 정책의 변경이 ListUI에 영향을 주지 않습니다.
ListUI listUI = new ListUI(images);
ProxyImage처럼 필요한 순간에 실제 객체를 생성해 주는 프록시를 가상 프록시라고 부르는데, 프록시에는 가상 프록시 외에 보호 프록시나 원격 프록시 등이 존재합니다. 보호 프록시는 실제 객체에 대한 접근을 제어하는 프록시로서, 접근 권한이 있는 경우에만 실제 객체의 메서드를 실행하는 방식으로 구현합니다. 원격 프록시는 RMI(Remote Method Invocation)처럼 다른 프로세스에 존재하는 객체에 접근할 때 사용되는 프록시입니다. 원격 프록시는 내부적으로 IPC(Inter process communication)이나 TCP 통신을 이용해서 프로세스의 객체를 실행하게 됩니다.


프록시 패턴을 적용할 때 고려할 점
프록시를 구현할 때 고려할 점은 실제 객체를 누가 생성할 것이냐에 대한 것입니다.
PrxoyImage와 같은 가상 프록시는 필요한 순간에 실제 객체를 생성하는 경우가 많기 때문에, ProxyImage 클래스에서 직접 RealImage 타입을 사용한 것처럼 가상 프록시에서 실제 생성할 객체의 타입을 사용하게 됩니다. 반면에 접근 제어를 위한 목적으로 사용되는 보호 프록시는 보호 프록시 객체를 생성할 때 실제 객체를 전달하면 되므로, 실제 객체의 타입을 알 필요 없이 추상화 타입을 사용하면 됩니다.

위임 방식이 아닌 상속을 사용해서 프록시를 구현할 수도 있습니다. 예를 들어, 특정 기능은 관리자만 실행할 수 있어야 한다고 할 경우 프록시를 사용할 수 있을 것입니다.

이대 보호 프록시는 다음과 같이 상위 클래스의 메서드를 제정의하는 방법으로 구현할 수 있습니다.